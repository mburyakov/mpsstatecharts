package statechart.textGen;

/*Generated by MPS */

import jetbrains.mps.textGen.SNodeTextGen;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.textGen.TextGenManager;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class Transition_TextGen extends SNodeTextGen {
  public void doGenerateText(SNode node) {
    this.append("(");
    this.append(Integer.toString(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "from", true), "state", false))));
    this.append(", ");
    this.append(Integer.toString(SNodeOperations.getIndexInParent(SLinkOperations.getTarget(SLinkOperations.getTarget(node, "to", true), "state", false))));
    this.append(", Transition () ");
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "condition", true), this.getSNode());
    this.append(" [");
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "action", true), this.getSNode());
    this.append("] [");
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "from", true), this.getSNode());
    this.append("] [");
    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, "to", true), this.getSNode());
    this.append("]");
    this.append(")");
    if (SNodeOperations.getIndexInParent(node) != ListSequence.fromList(SLinkOperations.getTargets(((SNode) SNodeOperations.getParent(node)), "transitions", true)).count() - 1) {
      this.append(",");
    }
    this.appendNewLine();
  }
}
