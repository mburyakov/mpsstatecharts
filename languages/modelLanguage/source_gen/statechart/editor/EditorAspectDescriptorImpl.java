package statechart.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;

public class EditorAspectDescriptorImpl implements EditorAspectDescriptor {
  public Collection<ConceptEditor> getEditors(ConceptDescriptor descriptor) {
    switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a, descriptor.getConceptFqName())) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Actor_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BlockStatement_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Channel_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new EmptyStatement_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new PrimitiveType_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Scheme_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new State_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Statechart_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new StatechartDeclaration_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new StatechartReference_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new TargetRefDotExpression_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new TargetReference_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Transition_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new True_Editor());
      default:
    }
    return Collections.emptyList();
  }

  public Collection<ConceptEditorComponent> getEditorComponents(ConceptDescriptor descriptor, String editorComponentId) {
    return Collections.emptyList();
  }



  public Collection<ConceptEditorHint> getHints() {
    return Collections.emptyList();
  }


  private static String[] stringSwitchCases_xbvbvu_a0a0a = new String[]{"statechart.structure.Actor", "statechart.structure.BlockStatement", "statechart.structure.Channel", "statechart.structure.EmptyStatement", "statechart.structure.PrimitiveType", "statechart.structure.Scheme", "statechart.structure.State", "statechart.structure.Statechart", "statechart.structure.StatechartDeclaration", "statechart.structure.StatechartReference", "statechart.structure.TargetRefDotExpression", "statechart.structure.TargetReference", "statechart.structure.Transition", "statechart.structure.True"};
}
