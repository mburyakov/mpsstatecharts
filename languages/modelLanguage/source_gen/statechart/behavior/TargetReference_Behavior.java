package statechart.behavior;

/*Generated by MPS */

import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.lang.core.behavior.ScopeProvider_Behavior;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class TargetReference_Behavior {
  public static void init(SNode thisNode) {
    if (SNodeOperations.getContainingLinkRole(thisNode) == "from") {
      SPropertyOperations.set(thisNode, "final", "" + (true));
      SPropertyOperations.set(thisNode, "initial", "" + (false));
    }
    if (SNodeOperations.getContainingLinkRole(thisNode) == "to") {
      SPropertyOperations.set(thisNode, "final", "" + (false));
      SPropertyOperations.set(thisNode, "initial", "" + (true));
    }
    if (SNodeOperations.getContainingLinkRole(thisNode) == "next") {
      SPropertyOperations.set(thisNode, "final", "" + (SPropertyOperations.getBoolean(((SNode) SNodeOperations.getParent(thisNode)), "final")));
      SPropertyOperations.set(thisNode, "initial", "" + (SPropertyOperations.getBoolean(((SNode) SNodeOperations.getParent(thisNode)), "initial")));
    }
  }

  public static Scope virtual_getScope_3734116213129936182(SNode thisNode, SNode kind, SNode child) {
    if (SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "state", false), "structure", true) == null) {
      return new EmptyScope();
    }
    return ScopeProvider_Behavior.call_getScope_3734116213129936182(SLinkOperations.getTarget(SLinkOperations.getTarget(thisNode, "state", false), "structure", true), kind, child);
  }

  public static List<SNode> virtual_getScopeVariables_5067982036267369894(SNode thisNode) {
    List<SNode> result = new ArrayList<SNode>();
    for (SNode e : Sequence.fromIterable(ScopeProvider_Behavior.call_getScope_3734116213129936182(thisNode, SConceptOperations.findConceptDeclaration("statechart.structure.State"), null).getAvailableElements(null))) {
      if (SConceptOperations.isSubConceptOf(SNodeOperations.getConceptDeclaration(e), "jetbrains.mps.lang.core.structure.INamedConcept")) {
        ListSequence.fromList(result).addElement((SNode) e);
      }
    }
    return result;
  }
}
