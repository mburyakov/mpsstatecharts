package statechart.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import statechart.behavior.Statechart_Behavior;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import java.util.List;
import java.util.ArrayList;

public class QueriesGenerated {
  public static boolean baseMappingRule_Condition_2747754268221229806(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "from", true), "next", true) != null || SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), "to", true), "next", true) != null;
  }

  public static boolean baseMappingRule_Condition_2747754268221230799(final IOperationContext operationContext, final BaseMappingRuleContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "states", true)).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, "structure", true) != null;
      }
    });
  }

  public static Object propertyMacro_GetPropertyValue_2747754268221188562(final IOperationContext operationContext, final PropertyMacroContext _context) {
    return SPropertyOperations.getString(_context.getNode(), "name");
  }

  public static SNode sourceNodeQuery_2747754268221220580(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "condition", true);
  }

  public static SNode sourceNodeQuery_2747754268221220590(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), "action", true);
  }

  public static SNode sourceNodeQuery_2747754268221220561(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode result = SLinkOperations.getTarget(_context.getNode(), "from", true);
    while (SLinkOperations.getTarget(result, "next", true) != null) {
      result = SLinkOperations.getTarget(result, "next", true);
    }
    return result;
  }

  public static SNode sourceNodeQuery_2747754268221220883(final IOperationContext operationContext, final SourceSubstituteMacroNodeContext _context) {
    SNode result = SLinkOperations.getTarget(_context.getNode(), "to", true);
    while (SLinkOperations.getTarget(result, "next", true) != null) {
      result = SLinkOperations.getTarget(result, "next", true);
    }
    return result;
  }

  public static Iterable sourceNodesQuery_2747754268221235317(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    return ListSequence.fromList(SLinkOperations.getTargets(_context.getNode(), "transitions", true)).concat(ListSequence.fromList(Statechart_Behavior.call_myComplexStates_2747754268221231933(_context.getNode())).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getTargets(SLinkOperations.getTarget(it, "structure", true), "transitions", true);
      }
    }));
  }

  public static Iterable sourceNodesQuery_2747754268221235275(final IOperationContext operationContext, final SourceSubstituteMacroNodesContext _context) {
    /*
      List<SNode> states;
      List<SNode> statesNew = SLinkOperations.getTargets(_context.getNode(), "states", true);
      boolean isChanged;
      do {
        states = statesNew;
        statesNew = new ArrayList<SNode>();
        isChanged = false;
        for (SNode state : ListSequence.fromList(states)) {
          if (SLinkOperations.getTarget(state, "structure", true) != null) {
            ListSequence.fromList(statesNew).addSequence(ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(state, "structure", true), "states", true)));
            isChanged = true;
          } else {
            ListSequence.fromList(statesNew).addElement(state);
          }
        }
      } while (isChanged);
    */
    return Statechart_Behavior.call_simpleStates_2747754268221231605(_context.getNode());
  }
}
