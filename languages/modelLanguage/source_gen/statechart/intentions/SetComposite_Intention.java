package statechart.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionDescriptor;

public class SetComposite_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public SetComposite_Intention() {
  }

  public String getConcept() {
    return "statechart.structure.State";
  }

  public String getPresentation() {
    return "SetComposite";
  }

  public String getPersistentStateKey() {
    return "statechart.intentions.SetComposite_Intention";
  }

  public String getLanguageFqName() {
    return "statechart";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SLinkOperations.getTarget(node, "structure", true) == null;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:07ef3f30-655c-4070-9d96-4a8b3e10dde2(statechart.intentions)", "4965811635370428368");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new SetComposite_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Set state composite";
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SLinkOperations.setNewChild(node, "structure", "statechart.structure.Statechart");
    }

    public IntentionDescriptor getDescriptor() {
      return SetComposite_Intention.this;
    }
  }
}
