package statechart.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.SideTransformActionsBuilderContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.action.AbstractSideTransformHintSubstituteAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SideTransformPreconditionContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class QueriesGenerated {
  public static List<SubstituteAction> sideTransform_ActionsFactory_TargetReference_2747754268221321282(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("statechart.structure.TargetRefDotExpression"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        return SNodeOperations.replaceWithAnother(_context.getSourceNode(), _quotation_createNode_2688r1_a0a0a0a0a(_context.getSourceNode()));
      }

      public String getMatchingText(String pattern) {
        return ".";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      public String getDescriptionText(String pattern) {
        return "Target Ref Dot";
      }
    });
    return result;
  }

  public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_TargetReference_2747754268221321283(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getSourceNode(), "state", false), "structure", true) != null;
  }

  public static List<SubstituteAction> sideTransform_ActionsFactory_State_3233011721676219930(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {
    List<SubstituteAction> result = ListSequence.fromList(new ArrayList<SubstituteAction>());
    ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(SConceptOperations.findConceptDeclaration("statechart.structure.State"), _context.getSourceNode()) {
      public SNode doSubstitute(@Nullable final EditorContext editorContext, String pattern) {
        return SLinkOperations.setTarget(_context.getSourceNode(), "structure", SConceptOperations.createNewNode("statechart.structure.StatechartExpression", null), true);
      }

      public String getMatchingText(String pattern) {
        return "=";
      }

      public String getVisibleMatchingText(String pattern) {
        return getMatchingText(pattern);
      }

      public String getDescriptionText(String pattern) {
        return "Add initializer";
      }
    });
    return result;
  }

  private static SNode _quotation_createNode_2688r1_a0a0a0a0a(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration("statechart.structure.TargetRefDotExpression", null, null, GlobalScope.getInstance(), false);
    quotedNode_3 = (SNode) parameter_1;
    if (quotedNode_3 != null) {
      quotedNode_2.addChild("left", HUtil.copyIfNecessary(quotedNode_3));
    }
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration("statechart.structure.TargetReference", null, null, GlobalScope.getInstance(), false);
    quotedNode_2.addChild("right", quotedNode_4);
    return quotedNode_2;
  }
}
