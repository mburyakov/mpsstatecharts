package smv.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.intentions.IntentionType;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collections;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public class SetSigned_Intention implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public SetSigned_Intention() {
  }

  public String getConcept() {
    return "smv.structure.WordType";
  }

  public String getPresentation() {
    return "SetSigned";
  }

  public String getPersistentStateKey() {
    return "smv.intentions.SetSigned_Intention";
  }

  public String getLanguageFqName() {
    return "smv";
  }

  public IntentionType getType() {
    return IntentionType.NORMAL;
  }

  public boolean isAvailableInChildNodes() {
    return false;
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }

  public SNodeReference getIntentionNodeReference() {
    return new SNodePointer("r:b656be1f-0e4d-4c8b-a4b8-39662e125785(smv.intentions)", "7906740086253330576");
  }

  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new SetSigned_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }

  public class IntentionImplementation implements IntentionExecutable {
    public IntentionImplementation() {
    }

    public String getDescription(final SNode node, final EditorContext editorContext) {
      return (SPropertyOperations.getBoolean(node, "isSigned") ?
        "Set 'unsigned'" :
        "Set 'signed'"
      );
    }

    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.set(node, "isSigned", "" + (!(SPropertyOperations.getBoolean(node, "isSigned"))));
    }

    public IntentionDescriptor getDescriptor() {
      return SetSigned_Intention.this;
    }
  }
}
