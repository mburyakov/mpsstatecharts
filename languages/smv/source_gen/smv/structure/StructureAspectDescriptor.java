package smv.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Arrays;
import jetbrains.mps.smodel.runtime.impl.CompiledConceptDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.StructureAspectInterpreted;

public class StructureAspectDescriptor implements jetbrains.mps.smodel.runtime.StructureAspectDescriptor {
  private static String[] stringSwitchCases_1htk8d_a0a0a = new String[]{"smv.structure.BooleanConstant", "smv.structure.BooleanType", "smv.structure.IConstant", "smv.structure.IIntegerLiteral", "smv.structure.IValidIdentifier", "smv.structure.IntegerConstant", "smv.structure.PrimitiveType", "smv.structure.SymbolicConstant", "smv.structure.UnspecifiedConcept", "smv.structure.WordConstant", "smv.structure.WordType"};

  public StructureAspectDescriptor() {
  }

  public ConceptDescriptor getDescriptor(String conceptFqName) {
    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {
      case 0:
        return new CompiledConceptDescriptor("smv.structure.BooleanConstant", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{"value"}, new String[]{});
      case 1:
        return new CompiledConceptDescriptor("smv.structure.BooleanType", "smv.structure.PrimitiveType", false, new String[]{"smv.structure.PrimitiveType"}, new String[]{}, new String[]{});
      case 2:
        return new CompiledConceptDescriptor("smv.structure.IConstant", null, true, new String[]{}, new String[]{}, new String[]{});
      case 3:
        return new CompiledConceptDescriptor("smv.structure.IIntegerLiteral", null, true, new String[]{}, new String[]{"value"}, new String[]{});
      case 4:
        return new CompiledConceptDescriptor("smv.structure.IValidIdentifier", null, true, new String[]{"jetbrains.mps.lang.core.structure.INamedConcept"}, new String[]{}, new String[]{});
      case 5:
        return new CompiledConceptDescriptor("smv.structure.IntegerConstant", "smv.structure.UnspecifiedConcept", false, new String[]{"smv.structure.UnspecifiedConcept", "smv.structure.IConstant", "smv.structure.IIntegerLiteral"}, new String[]{}, new String[]{});
      case 6:
        return new CompiledConceptDescriptor("smv.structure.PrimitiveType", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 7:
        return new CompiledConceptDescriptor("smv.structure.SymbolicConstant", "smv.structure.UnspecifiedConcept", false, new String[]{"smv.structure.UnspecifiedConcept", "smv.structure.IValidIdentifier", "smv.structure.IConstant"}, new String[]{}, new String[]{});
      case 8:
        return new CompiledConceptDescriptor("smv.structure.UnspecifiedConcept", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{}, new String[]{});
      case 9:
        return new CompiledConceptDescriptor("smv.structure.WordConstant", "jetbrains.mps.lang.core.structure.BaseConcept", false, new String[]{"jetbrains.mps.lang.core.structure.BaseConcept"}, new String[]{"representation"}, new String[]{});
      case 10:
        return new CompiledConceptDescriptor("smv.structure.WordType", "smv.structure.PrimitiveType", false, new String[]{"smv.structure.PrimitiveType"}, new String[]{"isSigned"}, new String[]{});
      default:
        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);
    }
  }
}
