package smv.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.IScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class WordConstant_Constraints extends BaseConstraintsDescriptor {
  public WordConstant_Constraints() {
    super("smv.structure.WordConstant");
  }

  @Override
  protected Map<String, PropertyConstraintsDescriptor> getNotDefaultProperties() {
    Map<String, PropertyConstraintsDescriptor> properties = new HashMap();
    properties.put("representation", new BasePropertyConstraintsDescriptor("representation", this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }

      @Override
      public boolean validateValue(SNode node, String propertyValue, IScope scope) {
        String propertyName = "representation";
        {
          // todo: move to typesystem 
          boolean isValid = true;
          isValid = isValid && ConstraintUtil.wordConstantCheckRegexp((SPropertyOperations.getString(propertyValue)));
          if (!(isValid)) {
            return false;
          }
          Integer l = ConstraintUtil.wordConstantLength((SPropertyOperations.getString(propertyValue)));
          isValid = isValid && !(l != null && l <= 0);
          isValid = isValid && !(ConstraintUtil.wordConstantIsDecimal((SPropertyOperations.getString(propertyValue))) && l == null);
          if (!(isValid)) {
            return false;
          }
          String value = ConstraintUtil.wordConstantValue((SPropertyOperations.getString(propertyValue)));
          int base;
          switch (ConstraintUtil.wordConstantBase((SPropertyOperations.getString(propertyValue)))) {
            case 'b':
              isValid = isValid && value.matches("[0-1]*");
              base = 2;
              break;
            case 'o':
              isValid = isValid && value.matches("[0-7]*");
              base = 8;
              break;
            case 'd':
              isValid = isValid && value.matches("[0-9]*");
              base = 10;
              break;
            case 'h':
              isValid = isValid && value.matches("[0-9a-f]*");
              base = 16;
              break;
            default:
              throw new AssertionError("Error when checking WordConstant");
          }
          isValid = isValid && l <= 64;
          if (!(isValid)) {
            return false;
          }
          long iValue = Long.parseLong(value, base);
          if (l != null) {
            if (ConstraintUtil.wordConstantIsSigned((SPropertyOperations.getString(propertyValue))) && ConstraintUtil.wordConstantIsDecimal((SPropertyOperations.getString(propertyValue)))) {
              isValid = isValid && iValue >= (1 >> l) - 1;
            } else {
              isValid = isValid && iValue >= 1 >> (l - 1);
            }
          }
          return isValid;
        }
      }
    });
    return properties;
  }
}
