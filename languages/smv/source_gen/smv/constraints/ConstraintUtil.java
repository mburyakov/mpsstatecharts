package smv.constraints;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;

public class ConstraintUtil {
  private static Set<String> reservesKeywords = SetSequence.fromSetAndArray(new HashSet<String>(), new String[]{"MODULE", "DEFINE", "MDEFINE", "CONSTANTS", "VAR", "IVAR", "FROZENVAR", "INIT", "TRANS", "INVAR", "SPEC", "CTLSPEC", "LTLSPEC", "PSLSPEC", "COMPUTE", "NAME", "INVARSPEC", "FAIRNESS", "JUSTICE", "COMPASSION", "ISA", "ASSIGN", "CONSTRSAINT", "SIMPWFF", "CTLWFF", "PSLWFF", "COMPWFF", "IN", "MIN", "MAX", "MIRROR", "PRED", "PREDICATES", "process", "array", "of", "boolean", "integer", "real", "word", "word1", "bool", "signed", "unsigned", "extend", "resize", "sizeof", "uwconst", "swconst", "EX", "AX", "EF", "AF", "EG", "AG", "E", "F", "O", "G", "H", "X", "Y", "Z", "A", "U", "S", "V", "T", "BU", "EBF", "ABF", "EBG", "ABG", "case", "esac", "mod", "next", "init", "union", "in", "xor", "xnor", "self", "TRUE", "FALSE", "count"});

  private ConstraintUtil() {
  }

  public static boolean isReserved(String s) {
    return SetSequence.fromSet(reservesKeywords).contains(s);
  }

  public static boolean wordConstantCheckRegexp(String s) {
    return s.matches("0[us]?[bBoOdDhH][0-9]*[_][0-9a-fA-F[_]]+");
  }

  public static String wordConstantValue(String s) {
    return s.replaceFirst(".*_", "").replaceAll("_", "").toLowerCase();
  }

  public static Integer wordConstantLength(String s) {
    String ans = s.replaceAll("(0[us]?[bBoOdDhH]|_.*)", "");
    if ((ans != null && ans.length() > 0)) {
      return Integer.decode(ans);
    }
    return null;
  }

  public static char wordConstantBase(String s) {
    return s.replaceFirst("0[us]?", "").charAt(0);
  }

  public static boolean wordConstantIsDecimal(String s) {
    return wordConstantBase(s) == 'd';
  }

  public static boolean wordConstantIsHexadecimal(String s) {
    return wordConstantBase(s) == 'h';
  }

  public static boolean wordConstantIsOctal(String s) {
    return wordConstantBase(s) == 'o';
  }

  public static boolean wordConstantIsBinary(String s) {
    return wordConstantBase(s) == 'b';
  }

  public static boolean wordConstantIsSigned(String s) {
    return s.charAt(1) == 's';
  }
}
