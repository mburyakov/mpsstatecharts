package statechart.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import statechart.behavior.StatechartExpression_Behavior;
import statechart.behavior.TargetRefExpression_Behavior;
import statechart.behavior.Statechart_Behavior;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_TargetReference_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_TargetReference_NonTypesystemRule() {
  }

  public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (!(SNodeOperations.hasRole(nodeToCheck, "statechart.structure.TargetRefDotExpression", "left")) && SLinkOperations.getTarget(SLinkOperations.getTarget(nodeToCheck, "state", false), "structure", true) != null && StatechartExpression_Behavior.call_getStatechart_2164628666946508700(SLinkOperations.getTarget(SLinkOperations.getTarget(nodeToCheck, "state", false), "structure", true)) != null) {
      if (TargetRefExpression_Behavior.call_toFinal_2747754268221296052(nodeToCheck)) {
        if (!(Statechart_Behavior.call_singleFinal_2747754268221309910(StatechartExpression_Behavior.call_getStatechart_2164628666946508700(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(nodeToCheck, "state", false), "statechart.structure.State"), "structure", true))) != null)) {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(nodeToCheck, "undefined 'from' point", "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2747754268221310260", null, errorTarget);
        }
      } else {
        if (!(Statechart_Behavior.call_singleInitial_2747754268221309514(StatechartExpression_Behavior.call_getStatechart_2164628666946508700(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(nodeToCheck, "state", false), "statechart.structure.State"), "structure", true))) != null)) {
          MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(nodeToCheck, "undefined 'from' point", "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2164628666946426437", null, errorTarget);
        }
      }
    }
  }

  public String getApplicableConceptFQName() {
    return "statechart.structure.TargetReference";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
