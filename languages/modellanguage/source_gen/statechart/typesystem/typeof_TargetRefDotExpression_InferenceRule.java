package statechart.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractInferenceRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.InferenceRule_Runtime;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import statechart.behavior.StatechartExpression_Behavior;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.typesystem.inference.EquationInfo;
import jetbrains.mps.smodel.SModelUtil_new;

public class typeof_TargetRefDotExpression_InferenceRule extends AbstractInferenceRule_Runtime implements InferenceRule_Runtime {
  public typeof_TargetRefDotExpression_InferenceRule() {
  }

  public void applyRule(final SNode nodeToCheck, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode theType = SConceptOperations.createNewNode("statechart.structure.TargetReferenceType", null);
    if (SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(nodeToCheck, "left", true), "state", false), "structure", true) != null) {
      SLinkOperations.setTarget(theType, "scope", StatechartExpression_Behavior.call_getStatechart_2164628666946508700(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(nodeToCheck, "left", true), "state", false), "statechart.structure.State"), "structure", true)), false);
    }
    if (SNodeOperations.hasRole(nodeToCheck, "statechart.structure.Transition", "from")) {
      SPropertyOperations.set(theType, "toFinal", "" + (true));
    } else if (SNodeOperations.hasRole(nodeToCheck, "statechart.structure.Transition", "to")) {
      SPropertyOperations.set(theType, "toInitial", "" + (true));
    } else {
      SPropertyOperations.set(theType, "toFinal", "" + (SPropertyOperations.getBoolean(SNodeOperations.cast(typeCheckingContext.typeOf(nodeToCheck, "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2164628666946407390", true), "statechart.structure.TargetReferenceType"), "toFinal")));
      SPropertyOperations.set(theType, "toInitial", "" + (SPropertyOperations.getBoolean(SNodeOperations.cast(typeCheckingContext.typeOf(nodeToCheck, "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2164628666946407504", true), "statechart.structure.TargetReferenceType"), "toInitial")));
    }
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(nodeToCheck, "right", true);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2164628666946403830", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2164628666946403781", true), (SNode) theType, _info_12389875345);
    }
    {
      SNode _nodeToCheck_1029348928467 = SLinkOperations.getTarget(nodeToCheck, "left", true);
      EquationInfo _info_12389875345 = new EquationInfo(_nodeToCheck_1029348928467, null, "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2164628666946404126", 0, null);
      typeCheckingContext.createEquation((SNode) typeCheckingContext.typeOf(_nodeToCheck_1029348928467, "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2164628666946404049", true), (SNode) typeCheckingContext.typeOf(nodeToCheck, "r:e6b49452-7c70-4713-9029-6c9dda75fe0a(statechart.typesystem)", "2164628666946404132", true), _info_12389875345);
    }
  }

  public String getApplicableConceptFQName() {
    return "statechart.structure.TargetRefDotExpression";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
