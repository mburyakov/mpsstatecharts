package statechart.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.SubtypingRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.ISubtypingRule_Runtime;
import java.util.List;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.SModelUtil_new;

public class ConcreteTargetReferenceTypeSubtypeOfAbstractReferenceType_SubtypingRule extends SubtypingRule_Runtime implements ISubtypingRule_Runtime {
  public ConcreteTargetReferenceTypeSubtypeOfAbstractReferenceType_SubtypingRule() {
  }

  public List<SNode> getSubOrSuperTypes(SNode targetReferenceType, TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    List<SNode> result = new ArrayList<SNode>();
    if (SPropertyOperations.getBoolean(targetReferenceType, "toFinal")) {
      SNode clone = SNodeOperations.copyNode(targetReferenceType);
      SPropertyOperations.set(clone, "toFinal", "" + (false));
      ListSequence.fromList(result).addElement(clone);
    }
    if (SPropertyOperations.getBoolean(targetReferenceType, "toInitial")) {
      SNode clone = SNodeOperations.copyNode(targetReferenceType);
      SPropertyOperations.set(clone, "toInitial", "" + (false));
      ListSequence.fromList(result).addElement(clone);
    }
    if (SPropertyOperations.getBoolean(targetReferenceType, "toFinal") && SPropertyOperations.getBoolean(targetReferenceType, "toInitial")) {
      SNode clone = SNodeOperations.copyNode(targetReferenceType);
      SPropertyOperations.set(clone, "toFinal", "" + (false));
      SPropertyOperations.set(clone, "toInitial", "" + (false));
      ListSequence.fromList(result).addElement(clone);
    }
    return result;
  }

  public String getApplicableConceptFQName() {
    return "statechart.structure.TargetReferenceType";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConceptFqName(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean isWeak() {
    return false;
  }

  public boolean surelyKeepsConcept() {
    return true;
  }
}
